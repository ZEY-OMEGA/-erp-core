
from flask import Flask, render_template, jsonify, request
import threading
import time
from datetime import datetime
import json

# استيراد النواة من مجلد core
from core.ats_core_pro import ATSCorePro
from core.ethics_guard import EthicsAndComplianceGuard
from core.decision_trigger import DecisionTriggerProtocol
from core.coherence_chain import CoherenceChain


app = Flask(__name__, template_folder='../templates')

# إنشاء نسخة من النظام
ats = ATSCorePro()
ethics = EthicsAndComplianceGuard()
trigger = DecisionTriggerProtocol(ats)
coherence_chain = ats.coherence_chain

# تخزين البيانات للعرض
dashboard_data = {
    "v": 1.0,
    "eta": 0.0,
    "phase": "standby",
    "goal": None,
    "timestamp": datetime.now().strftime("%H:%M:%S"),
    "history": [],
    "commands": []
}

# خيط لتحديث البيانات داخليًا
def background_data_updater():
    global dashboard_data
    dummy_state = {"connections": 5, "gaps": 2, "angles": [3.14/3, 3.14/3, 3.14/3]}
    
    while True:
        # تحديث البيانات من ats_core
        data = {
            "v": round(ats.v, 3),
            "eta": round(ats.eta, 3),
            "phase": ats.phase,
            "goal": ats.g,
            "timestamp": datetime.now().strftime("%H:%M:%S")
        }
        dashboard_data.update(data)
        
        # حفظ أحدث حدث
        if len(ats.history) > len(dashboard_data["history"]):
            latest_event = ats.history[-1]
            dashboard_data["history"].append({
                "phase": latest_event["phase"],
                "v": latest_event["v"],
                "eta": latest_event["eta"],
                "goal": latest_event["goal"],
                "timestamp": latest_event["timestamp"]
            })
        
        time.sleep(1)

@app.route('/')
def index():
    return render_template('dashboard.html', lang='ar')

@app.route('/en')
def index_en():
    return render_template('dashboard.html', lang='en')

@app.route('/api/status')
def get_status():
    return jsonify(dashboard_data)

@app.route('/api/process', methods=['POST'])
def process_command():
    data = request.get_json()
    user_input = data.get("command", "")
    
    if user_input:
        # تحليل الأمر بسيط
        command = {"raw": user_input}
        result = ethics.validate_and_respond(command)
        
        if result["allowed"]:
            goal_text = f"execute_{user_input.replace(' ', '_')}"
            ats.g = goal_text
            ats.update({"risk": 0.8}, new_goal=goal_text)
            dashboard_data["commands"].append({
                "input": user_input,
                "goal": goal_text,
                "timestamp": datetime.now().strftime("%H:%M:%S")
            })
            return jsonify({"status": "success", "result": result})
        else:
            dashboard_data["commands"].append({
                "input": user_input,
                "goal": None,
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "reason": result["explanation"]
            })
            return jsonify({"status": "blocked", "reason": result["explanation"]}), 400
    
    return jsonify({"status": "error", "message": "No command provided"}), 400

@app.route('/api/coherence-proof')
def get_coherence_proof():
    proof = coherence_chain.export_proof()
    return jsonify(json.loads(proof))

if __name__ == '__main__':
    # تشغيل الخيط الخلفي
    thread = threading.Thread(target=background_data_updater, daemon=True)
    thread.start()
    
    print("🌐 Real-Time Synchronization Dashboard يعمل على http://localhost:5000")
    app.run(debug=False, host='0.0.0.0', port=5000)
```